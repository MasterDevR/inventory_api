generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model role {
  id         String   @id @unique @default(uuid())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  user       user[]
}

model stock_type {
  id         String   @id @unique @default(uuid())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  stock      stock[]
}

model transaction_status {
  id           String        @id @unique @default(uuid())
  name         String        @unique
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  transactions transaction[]

  department_notification department_notification[]
}

model transaction_purpose {
  id           String        @id @unique @default(uuid())
  name         String        @unique
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  transactions transaction[]
}

model user {
  id                String          @id @unique @default(uuid())
  name              String?
  image             String?
  department_id     String          @unique
  role              String
  department_code   String          @unique
  department        String          @unique
  email             String?         @unique
  password          String
  requestor_type_id String?
  Requestor_type    requestor_type? @relation(fields: [requestor_type_id], references: [id])
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  transaction       transaction[]
  Role              role            @relation(fields: [role], references: [id])

  @@index([role], map: "user_role_fkey")
}

model requestor_type {
  id         String   @id @default(uuid())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       user[]
}

model stock {
  id               String             @id @unique @default(uuid())
  item             String
  price            Float
  description      String
  measurement      String
  stock_no         String             @unique
  re_order_point   String             @unique
  image            String
  reference        String
  consume_date     Int
  distributor      String
  stock_counter    Int                @default(0)
  stock_type       String
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  purchase_order   String
  quantity_issued  Int                @default(0)
  quantity_on_hand Int?
  purchase_request String?
  stocktype        stock_type         @relation(fields: [stock_type], references: [id])
  stockHistories   stock_history[]
  transaction_item transaction_item[]

  @@index([stock_type], map: "stock_stock_type_fkey")
}

model stock_history {
  id               String             @id @unique @default(uuid())
  stock_no         String
  price            Float
  distributor      String
  created_at       DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  total_request    Int                @default(0)
  purchase_order   String
  quantity_issued  Int                @default(0)
  quantity_on_hand Int?
  purchase_request String?
  stock            stock              @relation(fields: [stock_no], references: [stock_no], onDelete: Cascade)
  transaction_item transaction_item[]

  @@index([stock_no], map: "stock_history_stock_no_fkey")
}

model requisition_issue_slip_counter {
  id          String   @id @default(uuid())
  year        Int      @unique
  current_ris Int      @default(0)
  updated_at  DateTime @updatedAt
}

model transaction {
  id                  String               @id @default(uuid())
  ris                 Int?
  department_id       String
  status              String
  transaction_purpose String
  created_at          DateTime             @default(now())
  updated_at          DateTime             @updatedAt
  admin_notification  admin_notification[]
  user                user                 @relation(fields: [department_id], references: [department_id], onDelete: Cascade)
  Status              transaction_status   @relation(fields: [status], references: [id])
  TransactionType     transaction_purpose  @relation(fields: [transaction_purpose], references: [id])
  transaction_item    transaction_item[]

  @@index([department_id], map: "transaction_department_id_fkey")
  @@index([status], map: "transaction_status_fkey")
  @@index([transaction_purpose], map: "transaction_transaction_purpose_fkey")
}

model transaction_item {
  id                String         @id @default(uuid())
  transaction_id    String
  stock_no          String
  quantity          Int
  approved_quantity Int            @default(0)
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  history_id        String?
  History_id        stock_history? @relation(fields: [history_id], references: [id])
  stock             stock          @relation(fields: [stock_no], references: [stock_no], onDelete: Cascade)
  Transaction       transaction    @relation(fields: [transaction_id], references: [id])

  @@index([stock_no], map: "transaction_item_stock_no_fkey")
  @@index([transaction_id], map: "transaction_item_transaction_id_fkey")
  @@index([history_id], map: "transaction_item_history_id_fkey")
}

model admin_notification {
  id                  String      @id @default(uuid())
  transaction_id      String
  department          String
  transaction_purpose String
  no_item             Int
  created_at          DateTime    @default(now())
  updated_at          DateTime    @updatedAt
  viewed              Boolean     @default(false)
  Transaction         transaction @relation(fields: [transaction_id], references: [id])

  @@index([transaction_id], map: "admin_notification_transaction_id_fkey")
  @@index([transaction_purpose], map: "admin_notification_transaction_purpose_fkey")
}

model department_notification {
  id             String             @id @default(uuid())
  department_id  String?
  status         String
  transaction_id String
  created_at     DateTime           @default(now())
  updated_at     DateTime           @updatedAt
  Status         transaction_status @relation(fields: [status], references: [id])

  @@index([status], map: "department_notification_status_fkey")
  @@index([transaction_id], map: "department_notification_transaction_id_fkey")
}
